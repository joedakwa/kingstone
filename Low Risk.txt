[L] Locking the contract forever is possible

There is no check that the address of the new owner is the zero address.

If the current owner deliberately or accidently sets the new owner to the zero address, the contract will be permanently locked.

  function changeOwner (address _newOwner) public {
        require(msg.sender == owner, "Not Owner");
        owner = _newOwner;
        // @audit make sure _newOwner is not zero address
    }

Add a require statement that prevents the new owner from being the zero address.

require(_newOwner != address(0), "New owner cannot be zero address");

---------------------------------

[L] Use a two-step ownership transfer approach

When transfering ownership, please use Open Zeppelin's Ownable contract and import it into the contract.

Specifically the Ownable2Step contract.

As it gives you the security of not unintentionally sending the owner role to an address you do not control.

  function changeOwner (address _newOwner) public {
        require(msg.sender == owner, "Not Owner");
        owner = _newOwner;
    }

This ensures you are following the industry best practices.


-----------------------------

[L] Types should be explicitly defined

